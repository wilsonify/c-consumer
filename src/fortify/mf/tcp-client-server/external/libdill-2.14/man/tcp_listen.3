.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "TCP_LISTEN" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
tcp_listen \- starts listening for incoming TCP connections
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ tcp_listen(
\ \ \ \ const\ struct\ ipaddr*\ addr,
\ \ \ \ int\ backlog);
\f[]
.fi
.SH DESCRIPTION
.PP
TCP protocol is a reliable bytestream protocol for transporting data
over network.
It is defined in RFC 793.
.PP
This function starts listening for incoming connections.
The connections can be accepted using \f[B]tcp_accept\f[] function.
.PP
\f[B]addr\f[]: IP address to listen on.
.PP
\f[B]backlog\f[]: Maximum number of connections that can be kept open
without accepting them.
.PP
The socket can be closed either by \f[B]hclose\f[] or
\f[B]tcp_close\f[].
Both ways are equivalent.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns newly created socket.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EADDRINUSE\f[]: The specified address is already in use.
.IP \[bu] 2
\f[B]EADDRNOTAVAIL\f[]: The specified address is not available from the
local machine.
.IP \[bu] 2
\f[B]EINVAL\f[]: Invalid argument.
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.SH EXAMPLE
.IP
.nf
\f[C]
struct\ ipaddr\ addr;
ipaddr_local(&addr,\ NULL,\ 5555,\ 0);
int\ ls\ =\ tcp_listen(&addr,\ 10);
int\ s\ =\ tcp_accept(ls,\ NULL,\ \-1);
bsend(s,\ "ABC",\ 3,\ \-1);
char\ buf[3];
brecv(s,\ buf,\ sizeof(buf),\ \-1);
tcp_close(s);
tcp_close(ls);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]brecv\f[](3) \f[B]brecvl\f[](3) \f[B]bsend\f[](3)
\f[B]bsendl\f[](3) \f[B]hclose\f[](3) \f[B]tcp_accept\f[](3)
\f[B]tcp_accept_mem\f[](3) \f[B]tcp_close\f[](3) \f[B]tcp_connect\f[](3)
\f[B]tcp_connect_mem\f[](3) \f[B]tcp_done\f[](3) \f[B]tcp_fromfd\f[](3)
\f[B]tcp_fromfd_mem\f[](3) \f[B]tcp_listen_mem\f[](3)
\f[B]tcp_listener_fromfd\f[](3) \f[B]tcp_listener_fromfd_mem\f[](3)
